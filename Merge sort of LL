class Solution {
    
    static Node mergeSort(Node head) {
        
        if(head==null || head.next==null){
            return head;
        }
        
        Node mid=getMiddle(head);
        Node firsthalf=head;
        Node secondhalf=mid.next;
        
        mid.next=null;                    //imp step
        
        Node left=mergeSort(firsthalf);
        Node right=mergeSort(secondhalf);
        
        Node newhead=Merge(left, right);
        return newhead;
    }
    
    static Node getMiddle(Node head)
    {    
         if(head==null || head.next==null){
             return head;
         }
         
         Node slow=head;
         Node fast=head;
         while(fast!=null && fast.next!=null && fast.next.next!=null){
             fast=fast.next.next;
             slow=slow.next;
         }
         return slow;
    }
    
    static Node Merge(Node head1, Node head2) {
        
        Node t1=head1;
        Node t2=head2;
        Node tail=null;
        Node head=null;
        
        if(t1==null){
            return head2;
        }
        
        if(t2==null){
            return head1;
        }
        
        if(t1.data>=t2.data){
            head=t2;
            tail=t2;
            t2=t2.next;
        }
        
        else{
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        
        while(t1!=null && t2!=null){
            
            if(t1.data>=t2.data){
                tail.next=t2;
                tail=t2;
                t2=t2.next;
            }
            
            else{
                tail.next=t1;
                tail=t1;
                t1=t1.next;
            }
        }
        
        if(t1!=null){
            tail.next=t1;
        }
        
        else{
            tail.next=t2;
        }
        
        return head;
   } 
}
